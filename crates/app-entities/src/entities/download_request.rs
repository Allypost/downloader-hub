//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::Serialize;

use super::sea_orm_active_enums::ItemStatus;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "download_request")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(column_name = "_id", primary_key)]
    #[serde(skip)]
    pub id: i32,
    #[sea_orm(column_type = "Text", unique)]
    pub request_uid: String,
    #[sea_orm(column_name = "_client_id")]
    #[serde(skip)]
    pub client_id: i32,
    #[sea_orm(column_type = "Text")]
    pub url: String,
    pub status: ItemStatus,
    #[sea_orm(column_type = "JsonBinary")]
    pub meta: Json,
    #[sea_orm(column_name = "_app_meta", column_type = "JsonBinary")]
    #[serde(skip)]
    pub app_meta: Json,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::client::Entity",
        from = "Column::ClientId",
        to = "super::client::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Client,
    #[sea_orm(has_many = "super::download_result::Entity")]
    DownloadResult,
}

impl Related<super::client::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Client.def()
    }
}

impl Related<super::download_result::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DownloadResult.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
