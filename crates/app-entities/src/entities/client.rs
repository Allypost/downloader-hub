//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "client")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(column_name = "_id", primary_key)]
    #[serde(skip)]
    pub id: i32,
    #[sea_orm(column_type = "Text", unique)]
    pub name: String,
    #[sea_orm(column_type = "Text", unique)]
    pub api_key: String,
    #[sea_orm(column_name = "_app_meta", column_type = "JsonBinary")]
    #[serde(skip)]
    pub app_meta: Json,
    #[sea_orm(column_type = "JsonBinary")]
    pub download_folder: Json,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::download_request::Entity")]
    DownloadRequest,
}

impl Related<super::download_request::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DownloadRequest.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
